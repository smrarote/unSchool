generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         BigInt   @default(autoincrement())
  user_id    String   @id @default(cuid())
  username   String   @unique
  first_name String
  last_name  String?
  email      String   @unique
  mobile     String?  @unique
  password   String
  verified   Boolean  @default(false)
  social     Json?    @db.Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([username, email])
  @@map("users")
}

model subscriptions {
  id         BigInt   @default(autoincrement())
  sub_id     String   @id @default(cuid())
  user_id    String
  course_id  String
  payment_id String
  createdAt  DateTime @default(now())
  expireAt   DateTime
  trial      Boolean  @default(false)
}

model category {
  id    BigInt  @id @default(autoincrement())
  title String
  disc  String?
}

model courses {
  id        BigInt   @default(autoincrement())
  course_id String   @id @default(cuid())
  user_id   String
  cat_id    Int
  title     String
  disc      String?
  chap_id   String
  price     Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAIL
  DISPUTE
  RETURNED
}

enum PaymentMethod {
  RAZORPAY
}

model payments {
  id             BigInt        @default(autoincrement())
  pay_id         String        @id @default(cuid())
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod @default(RAZORPAY)
  transaction_id String?       @unique
  amt            Int           @default(0)
  createdAt      DateTime      @default(now())
  updateAt       DateTime      @updatedAt
}

model videos {
  id        BigInt   @default(autoincrement())
  vid_id    String   @id @default(cuid())
  paths     Json?
  thumbnail String?
  course_id String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum AttType {
  FILE
}

model attachments {
  id        BigInt   @default(autoincrement())
  att_id    String   @id @default(cuid())
  type      AttType  @default(FILE)
  path      String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model content {
  id        BigInt     @default(autoincrement())
  cont_id   String     @id @default(cuid())
  title     String
  disc      String?
  vid_id    String?
  att_id    String
  cha_id    String
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  chapters  chapters[]
}

model chapters {
  id             BigInt   @default(autoincrement())
  cha_id         String   @id @default(cuid())
  cont_id        String
  course_id      String
  content        content? @relation(fields: [contentCont_id], references: [cont_id])
  contentCont_id String?
}
