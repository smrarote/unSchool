generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            BigInt          @default(autoincrement())
  user_id       String          @id @default(cuid())
  username      String          @unique
  first_name    String
  last_name     String?
  email         String          @unique
  mobile        String?         @unique
  password      String
  verified      Boolean         @default(false)
  social        Json?           @db.Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subscriptions subscriptions[]

  @@unique([username, email])
  @@map("users")
}

model subscriptions {
  id         BigInt   @default(autoincrement())
  sub_id     String   @id @default(cuid())
  user       users    @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Cascade)
  user_id    String
  course     courses  @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  course_id  String
  payment    payments @relation(fields: [payment_id], references: [pay_id], onDelete: Restrict, onUpdate: Cascade)
  payment_id String   @unique
  createdAt  DateTime @default(now())
  expireAt   DateTime
  trial      Boolean  @default(false)

  @@unique([user_id, course_id])
}

model category {
  id      BigInt    @id @default(autoincrement())
  title   String
  disc    String?
  courses courses[]
}

model courses {
  id              BigInt          @default(autoincrement())
  course_id       String          @id @default(cuid())
  category        category        @relation(fields: [cat_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  cat_id          BigInt
  title           String
  disc            String?
  chapter         chapters        @relation(fields: [chap_id], references: [chap_id], name: "first_chapter", onDelete: Restrict, onUpdate: Cascade)
  chap_id         String
  price           Int             @default(0)
  active          Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updateAt        DateTime        @updatedAt
  subscriptions   subscriptions[]
  videos          videos[]
  attachments     attachments[]
  chapters        chapters?       @relation(fields: [chaptersChap_id], references: [chap_id])
  chaptersChap_id String?
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAIL
  DISPUTE
  RETURNED
}

enum PaymentMethod {
  RAZORPAY
}

model payments {
  id             BigInt         @default(autoincrement())
  pay_id         String         @id @default(cuid())
  status         PaymentStatus  @default(PENDING)
  method         PaymentMethod  @default(RAZORPAY)
  transaction_id String?        @unique
  amt            Int            @default(0)
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  subscriptions  subscriptions?
}

model videos {
  id               BigInt    @default(autoincrement())
  vid_id           String    @id @default(cuid())
  paths            Json?
  thumbnail        String?
  createdAt        DateTime  @default(now())
  updateAt         DateTime  @updatedAt
  content          content[]
  courses          courses?  @relation(fields: [coursesCourse_id], references: [course_id])
  coursesCourse_id String?
}

enum AttType {
  FILE
}

model attachments {
  id               BigInt    @default(autoincrement())
  att_id           String    @id @default(cuid())
  type             AttType   @default(FILE)
  path             String?
  createdAt        DateTime  @default(now())
  updateAt         DateTime  @updatedAt
  content          content[]
  courses          courses?  @relation(fields: [coursesCourse_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  coursesCourse_id String?
}

model content {
  id             BigInt       @default(autoincrement())
  cont_id        String       @id @default(cuid())
  title          String
  disc           String?
  vidoe          videos?      @relation(fields: [vid_id], references: [vid_id], onDelete: Restrict, onUpdate: Cascade)
  vid_id         String?
  attachment     attachments? @relation(fields: [att_id], references: [att_id], onDelete: Restrict, onUpdate: Cascade)
  att_id         String?
  parent         content?     @relation("parent_content", fields: [parent_id], references: [cont_id], name: "self_parent", onDelete: Restrict, onUpdate: Cascade)
  parent_id      String?
  chapter        chapters     @relation(fields: [chap_id], references: [chap_id], onDelete: Restrict, onUpdate: Cascade)
  chap_id        String
  createdAt      DateTime     @default(now())
  updateAt       DateTime     @updatedAt
  children       content[]    @relation("parent_content")
  content        content[]
  content        content?     @relation(fields: [contentCont_id], references: [cont_id])
  contentCont_id String?
  chapters       chapters[]
}

model chapters {
  id              BigInt     @default(autoincrement())
  chap_id         String     @id @default(cuid())
  contents        content    @relation(fields: [cont_id], references: [cont_id], name: "first", onDelete: Restrict, onUpdate: Cascade)
  cont_id         String
  parent          chapters?  @relation("parent_chapter", fields: [parent_id], references: [chap_id], name: "parent", onDelete: Restrict, onUpdate: Cascade)
  parent_id       String?
  courses         courses[]
  content         content[]
  children        chapters[] @relation("parent_chapter")
  courses         courses[]
  chapters        chapters[]
  chapters        chapters?  @relation(fields: [chaptersChap_id], references: [chap_id])
  chaptersChap_id String?
}
